// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/exam/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "software-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockExamRepository is a mock of ExamRepository interface.
type MockExamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExamRepositoryMockRecorder
}

// MockExamRepositoryMockRecorder is the mock recorder for MockExamRepository.
type MockExamRepositoryMockRecorder struct {
	mock *MockExamRepository
}

// NewMockExamRepository creates a new mock instance.
func NewMockExamRepository(ctrl *gomock.Controller) *MockExamRepository {
	mock := &MockExamRepository{ctrl: ctrl}
	mock.recorder = &MockExamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamRepository) EXPECT() *MockExamRepositoryMockRecorder {
	return m.recorder
}

// GetByPatientID mocks base method.
func (m *MockExamRepository) GetByPatientID(patientID int) ([]models.Exam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPatientID", patientID)
	ret0, _ := ret[0].([]models.Exam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPatientID indicates an expected call of GetByPatientID.
func (mr *MockExamRepositoryMockRecorder) GetByPatientID(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPatientID", reflect.TypeOf((*MockExamRepository)(nil).GetByPatientID), patientID)
}
