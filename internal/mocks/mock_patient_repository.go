// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/patient/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "software-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockPatientRepository is a mock of PatientRepository interface.
type MockPatientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryMockRecorder
}

// MockPatientRepositoryMockRecorder is the mock recorder for MockPatientRepository.
type MockPatientRepositoryMockRecorder struct {
	mock *MockPatientRepository
}

// NewMockPatientRepository creates a new mock instance.
func NewMockPatientRepository(ctrl *gomock.Controller) *MockPatientRepository {
	mock := &MockPatientRepository{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepository) EXPECT() *MockPatientRepositoryMockRecorder {
	return m.recorder
}

// CreatePatient mocks base method.
func (m *MockPatientRepository) CreatePatient(patient models.Patient) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatient", patient)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatient indicates an expected call of CreatePatient.
func (mr *MockPatientRepositoryMockRecorder) CreatePatient(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatient", reflect.TypeOf((*MockPatientRepository)(nil).CreatePatient), patient)
}

// DeletePatient mocks base method.
func (m *MockPatientRepository) DeletePatient(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatient", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatient indicates an expected call of DeletePatient.
func (mr *MockPatientRepositoryMockRecorder) DeletePatient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatient", reflect.TypeOf((*MockPatientRepository)(nil).DeletePatient), id)
}

// GetPatientByID mocks base method.
func (m *MockPatientRepository) GetPatientByID(id int) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientByID", id)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientByID indicates an expected call of GetPatientByID.
func (mr *MockPatientRepositoryMockRecorder) GetPatientByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientByID", reflect.TypeOf((*MockPatientRepository)(nil).GetPatientByID), id)
}

// ListPatients mocks base method.
func (m *MockPatientRepository) ListPatients() ([]models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPatients")
	ret0, _ := ret[0].([]models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatients indicates an expected call of ListPatients.
func (mr *MockPatientRepositoryMockRecorder) ListPatients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatients", reflect.TypeOf((*MockPatientRepository)(nil).ListPatients))
}

// SearchPatients mocks base method.
func (m *MockPatientRepository) SearchPatients(query string, limit int) ([]models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPatients", query, limit)
	ret0, _ := ret[0].([]models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPatients indicates an expected call of SearchPatients.
func (mr *MockPatientRepositoryMockRecorder) SearchPatients(query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPatients", reflect.TypeOf((*MockPatientRepository)(nil).SearchPatients), query, limit)
}

// UpdatePatient mocks base method.
func (m *MockPatientRepository) UpdatePatient(patient models.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatient", patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockPatientRepositoryMockRecorder) UpdatePatient(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockPatientRepository)(nil).UpdatePatient), patient)
}
