// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/business_hour/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "software-backend/internal/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockBusinessHoursRepository is a mock of BusinessHoursRepository interface.
type MockBusinessHoursRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessHoursRepositoryMockRecorder
}

// MockBusinessHoursRepositoryMockRecorder is the mock recorder for MockBusinessHoursRepository.
type MockBusinessHoursRepositoryMockRecorder struct {
	mock *MockBusinessHoursRepository
}

// NewMockBusinessHoursRepository creates a new mock instance.
func NewMockBusinessHoursRepository(ctrl *gomock.Controller) *MockBusinessHoursRepository {
	mock := &MockBusinessHoursRepository{ctrl: ctrl}
	mock.recorder = &MockBusinessHoursRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessHoursRepository) EXPECT() *MockBusinessHoursRepositoryMockRecorder {
	return m.recorder
}

// GetBusinessHoursForDate mocks base method.
func (m *MockBusinessHoursRepository) GetBusinessHoursForDate(date time.Time) ([]models.BusinessHourInterval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessHoursForDate", date)
	ret0, _ := ret[0].([]models.BusinessHourInterval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessHoursForDate indicates an expected call of GetBusinessHoursForDate.
func (mr *MockBusinessHoursRepositoryMockRecorder) GetBusinessHoursForDate(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessHoursForDate", reflect.TypeOf((*MockBusinessHoursRepository)(nil).GetBusinessHoursForDate), date)
}
