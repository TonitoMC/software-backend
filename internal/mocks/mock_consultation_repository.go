// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/consultation/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "software-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockConsultationRepository is a mock of ConsultationRepository interface.
type MockConsultationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConsultationRepositoryMockRecorder
}

// MockConsultationRepositoryMockRecorder is the mock recorder for MockConsultationRepository.
type MockConsultationRepositoryMockRecorder struct {
	mock *MockConsultationRepository
}

// NewMockConsultationRepository creates a new mock instance.
func NewMockConsultationRepository(ctrl *gomock.Controller) *MockConsultationRepository {
	mock := &MockConsultationRepository{ctrl: ctrl}
	mock.recorder = &MockConsultationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsultationRepository) EXPECT() *MockConsultationRepositoryMockRecorder {
	return m.recorder
}

// GetByPatientID mocks base method.
func (m *MockConsultationRepository) GetByPatientID(patientID int) ([]models.Consultation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPatientID", patientID)
	ret0, _ := ret[0].([]models.Consultation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPatientID indicates an expected call of GetByPatientID.
func (mr *MockConsultationRepositoryMockRecorder) GetByPatientID(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPatientID", reflect.TypeOf((*MockConsultationRepository)(nil).GetByPatientID), patientID)
}
