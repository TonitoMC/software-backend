// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/appointment/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "software-backend/internal/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAppointmentRepository is a mock of AppointmentRepository interface.
type MockAppointmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentRepositoryMockRecorder
}

// MockAppointmentRepositoryMockRecorder is the mock recorder for MockAppointmentRepository.
type MockAppointmentRepositoryMockRecorder struct {
	mock *MockAppointmentRepository
}

// NewMockAppointmentRepository creates a new mock instance.
func NewMockAppointmentRepository(ctrl *gomock.Controller) *MockAppointmentRepository {
	mock := &MockAppointmentRepository{ctrl: ctrl}
	mock.recorder = &MockAppointmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentRepository) EXPECT() *MockAppointmentRepositoryMockRecorder {
	return m.recorder
}

// CreateAppointment mocks base method.
func (m *MockAppointmentRepository) CreateAppointment(appointment models.Appointment) (*models.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointment", appointment)
	ret0, _ := ret[0].(*models.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppointment indicates an expected call of CreateAppointment.
func (mr *MockAppointmentRepositoryMockRecorder) CreateAppointment(appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointment", reflect.TypeOf((*MockAppointmentRepository)(nil).CreateAppointment), appointment)
}

// DeleteAppointment mocks base method.
func (m *MockAppointmentRepository) DeleteAppointment(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppointment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppointment indicates an expected call of DeleteAppointment.
func (mr *MockAppointmentRepositoryMockRecorder) DeleteAppointment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppointment", reflect.TypeOf((*MockAppointmentRepository)(nil).DeleteAppointment), id)
}

// GetAppointmentByID mocks base method.
func (m *MockAppointmentRepository) GetAppointmentByID(id int) (*models.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentByID", id)
	ret0, _ := ret[0].(*models.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentByID indicates an expected call of GetAppointmentByID.
func (mr *MockAppointmentRepositoryMockRecorder) GetAppointmentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentByID", reflect.TypeOf((*MockAppointmentRepository)(nil).GetAppointmentByID), id)
}

// HasOverlappingAppointment mocks base method.
func (m *MockAppointmentRepository) HasOverlappingAppointment(start, end time.Time, excludeID *int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasOverlappingAppointment", start, end, excludeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasOverlappingAppointment indicates an expected call of HasOverlappingAppointment.
func (mr *MockAppointmentRepositoryMockRecorder) HasOverlappingAppointment(start, end, excludeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasOverlappingAppointment", reflect.TypeOf((*MockAppointmentRepository)(nil).HasOverlappingAppointment), start, end, excludeID)
}

// ListAppointmentsInDateRange mocks base method.
func (m *MockAppointmentRepository) ListAppointmentsInDateRange(startTime, endTime time.Time) ([]models.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppointmentsInDateRange", startTime, endTime)
	ret0, _ := ret[0].([]models.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppointmentsInDateRange indicates an expected call of ListAppointmentsInDateRange.
func (mr *MockAppointmentRepositoryMockRecorder) ListAppointmentsInDateRange(startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppointmentsInDateRange", reflect.TypeOf((*MockAppointmentRepository)(nil).ListAppointmentsInDateRange), startTime, endTime)
}

// UpdateAppointment mocks base method.
func (m *MockAppointmentRepository) UpdateAppointment(appointment models.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppointment", appointment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAppointment indicates an expected call of UpdateAppointment.
func (mr *MockAppointmentRepositoryMockRecorder) UpdateAppointment(appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppointment", reflect.TypeOf((*MockAppointmentRepository)(nil).UpdateAppointment), appointment)
}
